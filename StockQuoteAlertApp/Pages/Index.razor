@page "/"
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client;
@using StockQuoteAlertApp.Exception;
@using StockQuoteAlertApp.Hubs;
@using StockQuoteAlertApp.Models;
@using StockQuoteAlertApp.Services;
@using System.Text
@using System.Threading.Tasks
@inject MonitoringService MonitoringService
@inject IHubContext<MonitoringHub> HubContext
@inject NavigationManager NavManager

<h3>Asset Monitoring</h3>

<div class="asset-form">
    <EditForm Model="asset" OnValidSubmit="MonitorAsset">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="symbol">Symbol:</label>
        <InputText id="symbol" @bind-Value="asset.Symbol" placeholder="Symbol" />

        <label for="buyPrice">Buy Price:</label>
        <InputNumber id="buyPrice" @bind-Value="asset.BuyPrice" placeholder="Buy Price" />

        <label for="sellPrice">Sell Price:</label>
        <InputNumber id="sellPrice" @bind-Value="asset.SellPrice" placeholder="Sell Price" />

        <button type="submit">Monitor</button>
    </EditForm>
</div>

<div class="asset-graph-container">
    <!-- Ativo monitorado -->
    <div class="monitored-asset">
        <h3>Monitoring: @asset.Symbol</h3>
        <p>Current Price: @currentPrice</p>
        <p>Buy Price: @asset.BuyPrice</p>
        <p>Sell Price: @asset.SellPrice</p>
    </div>
    <!-- Gráfico -->
    <div class="flex-container">
        <div class="graph">
            <svg width="500" height="200" xmlns="http://www.w3.org/2000/svg">
                <path d="@graphPath" fill="none" stroke="@currentColor" stroke-width="2" />
            </svg>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal" tabindex="-1" style="display:@(isModalVisible ? "block" : "none");">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Alert</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <p>@modalMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    public Asset asset = new Asset();
    public decimal currentPrice = 0m; // Adicionado para mostrar o preço atual
    public HubConnection _hubConnection;
    private bool isModalVisible = false;
    private string modalMessage = "";
    private string graphPath = "M 0,100"; // Começa no ponto (0,100)
    private string currentColor = "red";
    private Random rng = new Random();

    private async Task MonitorAsset()
    {
        try
        {
            MonitoringService.StartMonitoring(asset);
            if (_hubConnection.State == HubConnectionState.Disconnected)
            {
                await _hubConnection.StartAsync();
            }
        }
        catch (AssetException ex)
        {
            ShowModal(ex.Message);
        }
        catch (TaskCanceledException)
        {
            CloseModal();  // Você pode decidir o que fazer aqui.
        }
    }

    private void HandleError(object sender, System.Exception ex)
    {
        if (ex is AssetException)
        {
            ShowModal(ex.Message);
        }
        // Adicione qualquer outro tratamento de exceção necessário aqui
    }

    private void ShowModal(string message)
    {
        modalMessage = message;
        isModalVisible = true;
        InvokeAsync(StateHasChanged);
    }

    private void CloseModal()
    {
        isModalVisible = false;
        InvokeAsync(StateHasChanged);
    }

    // Atualiza o preço em tempo real
    private void UpdatePrice(string symbol, decimal price)
    {
        if (asset.Symbol == symbol)
        {
            currentPrice = price;
            InvokeAsync(() => StateHasChanged());
        }
    }


    protected override async Task OnInitializedAsync()
    {
        MonitoringService.ErrorOccurred += HandleError;
        var hubUrl = NavManager.ToAbsoluteUri("/hubs/MonitoringHub").ToString();
        _hubConnection = new HubConnectionBuilder().WithUrl(hubUrl).Build();

        // Assine o evento UpdatePrice
        _hubConnection.On<string, decimal>("UpdatePrice", UpdatePrice);
        // Inicializar o gráfico
        GenerateRandomGraphPath();
        ChangeGraphColor();

        // Atualizar o gráfico a cada segundo
        _ = UpdateGraphPeriodically();
    }

    public async ValueTask DisposeAsync()
    {
        MonitoringService.ErrorOccurred -= HandleError;
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private void GenerateRandomGraphPath()
    {
        StringBuilder pathBuilder = new StringBuilder();
        pathBuilder.Append("M 0,100 "); // Começa no ponto (0,100)

        for (int i = 10; i <= 490; i += 10) // Avançamos de 10 em 10 pixels
        {
            int y = rng.Next(50, 150); // Valores de y entre 50 e 150
            pathBuilder.Append($"L {i},{y} ");
        }

        graphPath = pathBuilder.ToString();
    }

    private void ChangeGraphColor()
    {
        // Uma maneira simples de gerar cores aleatórias
        currentColor = $"#{rng.Next(256):X2}{rng.Next(256):X2}{rng.Next(256):X2}";
    }

    private async Task UpdateGraphPeriodically()
    {
        while (true)
        {
            await Task.Delay(1000); // Atualiza a cada 1 segundo

            GenerateRandomGraphPath();
            ChangeGraphColor();

            StateHasChanged(); // Informa ao Blazor para re-renderizar o componente
        }
    }
}
